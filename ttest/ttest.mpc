sfix.set_precision(9, 10)

mean1 = sfix(5.5)
mean2 = sfix(5.5)

variance1 = sfix(5.5)
variance2 = sfix(5.5)

n1 = sfix(100)
n2 = sfix(120)

T_squared_nominator = mean1 - mean2
T_squared_nominator = T_squared_nominator * T_squared_nominator

normalized_variance1 = variance1 / n1
normalized_variance2 = variance2 / n2

T_squared_denominator = normalized_variance1 + normalized_variance2

T_squared = T_squared_nominator / T_squared_denominator

df_nominator = normalized_variance1 + normalized_variance2
df_nominator = df_nominator * df_nominator

normalized_variance1_squared = normalized_variance1 * normalized_variance1
normalized_variance2_squared = normalized_variance2 * normalized_variance2

df_denominator = normalized_variance1_squared / sfix(100 - 1) + normalized_variance2_squared / sfix(120 - 1)

df_int = df_nominator / df_denominator
df_int = AdvInteger.TruncRoundNearest(df_int.v, 10, 9, 30)

table = [6.313751514800932,   2.919985580355516,    2.3533634348018264,   2.13184678133629,
         2.015048372669157,   1.9431802803927816,   1.894578605061305,    1.8595480375228424,
         1.8331129326536335,  1.8124611228107335,   1.7958848187036691,   1.782287555649159,
         1.7709333959867988,  1.7613101357748562,   1.7530503556925547,   1.74588367627624,
         1.7396067260750672,  1.7340636066175354,   1.729132811521367,    1.7247182429207857,
         1.7207429028118775,  1.717144374380242,    1.7138715277470473,   1.7108820799094275,
         1.7081407612518986,  1.7056179197592727,   1.7032884457221265,   1.701130934265931,
         1.6991270265334972,  1.6972608943617378,   1.6955187891366663,   1.6938887423906548,
         1.6923603038977453,  1.6909242507706543,   1.6895724539637709,   1.6882977108049164,
         1.6870936167109873,  1.685954457643814,    1.6848751194973992,   1.68385101138658,
         1.6828780004112913,  1.6819523559426,      1.681070701847763,    1.6802299753652514,
         1.6794273915744247,  1.67866041259169,     1.67792672077558,     1.6772241953450393,
         1.6765508919142629,  1.6759050245283311,   1.6752849498502618,   1.6746891532047905,
         1.6741162362294313,  1.6735649059209428,   1.6730339648966592,   1.6725223027163505,
         1.6720288881322787,  1.671552762153672,    1.6710930318274826,   1.6706488646505926,
         1.670219483539925,   1.669804162296528,    1.6694022215079607,   1.669013024840352,
         1.6686359756775713,  1.6682705140701908,   1.667916113961428,    1.6675722806611726,
         1.6672385485425922,  1.6669144789387698,   1.666599658219398,    1.6662936960297958,
         1.665996223676495,   1.6657068926453513,   1.6654253732396658,   1.6651513533271265,
         1.6648845371855607,  1.6646246444385238,   1.6643714090726742,   1.6641245785296965,
         1.6638839128662524,  1.6636491839760918,   1.663420174869025,    1.6631966790019561,
         1.6629784996576567,  1.6627654493673436,   1.6625573493735006,   1.6623540291297123,
         1.662155325834565,   1.6619610839969403,   1.6617711550302645,   1.6615853968734788,
         1.661403673636714,   1.6612258552697985,   1.6610518172519086,   1.6608814403008005,
         1.6607146101002037,  1.6605512170440568,   1.6603911559963895,   1.66023432606575]
# if larger than 100, let us take 1.645

cv = sfix(0)
for i in range(100):
    candidate_cv = sfix(table[i] * table[i])
    is_equal = AdvInteger.EQZ(df_int - cint(i + 1), 10, 40)
    cv = cv + sfix(is_equal) * candidate_cv

larger_than_100 = sint()
AdvInteger.LTZ(larger_than_100, df_int - cint(100), 10, 40)
cv = cv + sfix(1.645 * 1.645) * sfix(larger_than_100)

res = cv > T_squared